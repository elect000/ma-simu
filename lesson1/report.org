#+TITLE: 数理アルゴリズムとシミュレーション
#+SUBTITLE: 演習課題１
#+AUTHOR: 情報科学類３年 江畑 拓哉 (201611350)
# This is a Bibtex reference
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:t arch:headline ^:nil
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:nil e:nil email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:nil title:t toc:nil todo:t |:t
#+DATE: 
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 9.1.4)
#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS: 
#+LATEX_HEADER_EXTRA: \DeclareMathOperator*{\argmax}{argmax}
#+LATEX_HEADER_EXTRA: \DeclareMathAlphabet{\mathpzc}{OT1}{pzc}{m}{it}
#+LaTeX_CLASS_OPTIONS:
#+DESCRIPTION:
#+KEYWORDS:
#+STARTUP: indent overview inlineimages

* 課題1
** 
     以下の命令を実行し,実行結果について説明せよ.
     - ones(4, 3)
       #+begin_example
--> ones(4, 3)
 ans  =

   1.   1.   1.
   1.   1.   1.
   1.   1.   1.
   1.   1.   1.
#+end_example
     　すべての要素が1の4行3列の行列を作成する。
     - eye(5, 3)
       #+BEGIN_EXAMPLE
--> eye(5, 3)
 ans  =

   1.   0.   0.
   0.   1.   0.
   0.   0.   1.
   0.   0.   0.
   0.   0.   0.
#+END_EXAMPLE
     　対角要素が1の5行3列の行列を作成する。
     - zeros(3, 4)
       #+BEGIN_EXAMPLE
--> zeros(3,4)
 ans  =

   0.   0.   0.   0.
   0.   0.   0.   0.
   0.   0.   0.   0.
#+END_EXAMPLE
     　すべての要素が0の3行4列の行列を作成する。
     - linspace(-1, 1, 10)
       #+BEGIN_EXAMPLE
--> linspace(-1,1,10)
 ans  =


         column 1 to 3

  -1.  -0.7777778  -0.5555556

         column 4 to 5

  -0.3333333  -0.1111111

         column 6 to 7

   0.1111111   0.3333333

         column 8 to 10

   0.5555556   0.7777778   1.
#+END_EXAMPLE
     　-1 から 1 へ向かう等間隔に並んだ10個の点を含んだ一次元配列を作成する。
** 
　v = [1; -2]; w = [1 2]; A = [1 2; 3 4]; を実行し,以下の問いに答えよ.
*** 1-2-1
　size 関数について以下の命令を実行し,実行結果を比較せよ.
- size(v)
  #+BEGIN_EXAMPLE
--> size(v)
 ans  =

   2.   1.
#+END_EXAMPLE
　2行1列であることを示している。
- size(w)
  #+BEGIN_EXAMPLE
--> size(w)
 ans  =

   1.   2.
#+END_EXAMPLE
　1行2列であることを示している。
- size(A)
  #+BEGIN_EXAMPLE
--> size(A)
 ans  =

   2.   2.
#+END_EXAMPLE
　2行2列であることを示している。
*** 1-2-2
　max 関数について以下の命令を実行し、実行結果を比較せよ.
- max(A)
  #+BEGIN_EXAMPLE
--> max(A)
 ans  =

   4.
#+END_EXAMPLE
　　A のすべての要素に対して最大の要素を返している。
- max(A, 'c')
  #+BEGIN_EXAMPLE
--> max(A, 'c')
 ans  =

   2.
   4.
#+END_EXAMPLE
　Aの各行に対して最大の要素を返している。
- max(A, 'r')
  #+BEGIN_EXAMPLE
--> max(A, 'r')
 ans  =

   3.   4.
#+END_EXAMPLE
　Aの各列に対して最大の要素を返している。
*** 1-2-3
　sum 関数について以下の命令を実行し,実行結果を比較せよ.
- sum(A)
  #+BEGIN_EXAMPLE
--> sum(A)
 ans  =

   10.
#+END_EXAMPLE
　Aのすべての要素を加算した値を返している。
- sum(A, 1)
  #+BEGIN_EXAMPLE
--> sum(A, 1)
 ans  =

   4.   6.
#+END_EXAMPLE
　Aの各行に対して加算した値を返している。
- sum(A, 2)
  #+BEGIN_EXAMPLE
--> sum(A, 2)
 ans  =

   3.
   7.
#+END_EXAMPLE
　Aの各列に対して加算した値を返している。
*** 1-2-4
　以下の命令を実行し,実行結果について説明せよ.
- norm(v)
  #+BEGIN_EXAMPLE
--> norm(v)
 ans  =

   2.236068
#+END_EXAMPLE
　そのベクトルのノルムを返している。
- gsort(v)
  #+BEGIN_EXAMPLE
--> gsort(v)
 ans  =

   1.
  -2.
#+END_EXAMPLE
　要素に対してソートを行って、大きい値順に返している。
- abs(v)
  #+BEGIN_EXAMPLE
--> abs(v)
 ans  =

   1.
   2.
#+END_EXAMPLE
　絶対値を取った値を返している。
- inv(A)
  #+BEGIN_EXAMPLE
--> inv(A)
 ans  =

  -2.    1. 
   1.5  -0.5
#+END_EXAMPLE
　逆行列を返している。
* 課題2
** 
　 $\bm{A}$ と $\bm{v}$ を変数 A と v へ代入せよ.
#+BEGIN_EXAMPLE
--> A = [4, -2, 0; -1, 4, -2; 0, -1, 4]
 A  = 

   4.  -2.   0.
  -1.   4.  -2.
   0.  -1.   4.
-> v = [3; 0; 1.5]
 v  = 

   3.
   0.
   1.5
#+END_EXAMPLE
** 
　 $\bm{A}\bm{v}$ の計算結果を示せ.
#+BEGIN_EXAMPLE
--> A * v
 ans  =

   12.
  -6.
   6.
#+END_EXAMPLE

** 
　ベクトル $\bm{v}$ の 2 ノルム $||v||_2$ を求めよ. Scilab の norm 関数を用いてもよい.
#+BEGIN_EXAMPLE
-> norm(v)
 ans  =

   3.354102
#+END_EXAMPLE
** 
　線形方程式 $\bm{A}\bm{x} = \bm{v}$ の解 $\bm{x}$ を求めよ.
#+BEGIN_EXAMPLE
--> A \ v
 ans  =

   1.
   0.5
   0.5
#+END_EXAMPLE

* 課題3
公式の左辺と右辺を計算せよ.
- 値を代入する。
  #+BEGIN_EXAMPLE
--> A = [1, -1, 0; -1, 2, -1; 0, -1, 2], x = [1;2;3], y = [-2; 2; 1]
 A  = 

   1.  -1.   0.
  -1.   2.  -1.
   0.  -1.   2.

 x  = 

   1.
   2.
   3.

 y  = 

  -2.
   2.
   1.
#+END_EXAMPLE
- 左辺を計算する。
  #+BEGIN_EXAMPLE
--> inv(A + x * y')
 ans  =

   5.    0.   -1. 
   3.8   0.2  -0.8
   2.2  -0.2  -0.2
#+END_EXAMPLE
- 右辺の計算する。
  #+BEGIN_EXAMPLE
--> inv(A) - (1 / (1 + y' * inv(A) * x))*(inv(A)*x)*(y'*inv(A))
 ans  =

   5.    0.   -1. 
   3.8   0.2  -0.8
   2.2  -0.2  -0.2
#+END_EXAMPLE
* 課題4
** 
　gsort 関数と abs 関数を用いて, 1 次元配列の絶対値最小の要素と絶対値が 2 番目に小さい要素を返す関数を作成せよ.ただし,返す値は絶対値ではなく,もとの
要素の値とすること。
#+BEGIN_EXAMPLE
function [val1, val2] = myfunc(vec)
[vals, idxs] = gsort(abs(vec))
idxs = flipdim(idxs, 2)
val1 = vec(idxs(1))
val2 =  vec(idxs(2))
endfunction
#+END_EXAMPLE

** 
#+BEGIN_EXAMPLE
--> [val1, val2] = myfunc(datas)
 val2  = 

  -0.048493

 val1  = 

  -0.0278533
#+END_EXAMPLE
